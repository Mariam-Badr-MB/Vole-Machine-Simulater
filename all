#include <bits/stdc++.h>
using namespace std;

const int REGISTER_SIZE = 16;
const int MEMORY_SIZE = 256;
class MainUI;
class Machine;


class Memory {
protected:
    vector<string> data_M = vector<string>(MEMORY_SIZE, "0");
public:
    const string& getcell(int m) const {
        if (m < 0 || m >= MEMORY_SIZE) {
            throw out_of_range("Memory access out of bounds");
        }

        return data_M[m];
    }

    void setcell(int m, string d) {
        if (m < 0 || m >= MEMORY_SIZE) {
            throw out_of_range("Memory access out of bounds");
        }

        data_M[m] = d;
    }
};

class Register {
protected:
    vector<int> data_R = vector<int>(REGISTER_SIZE, 0);
public:
    int getcell(int r) {
        return data_R[r];
    }
    void setcell(int r, int d) {
        data_R[r] = d;
    }
};

class ALU {
public:
    void add_Two_complement(int idx1, int idx2, int idx3, Register &reg);
    void add_Floating_point(int idx1, int idx2, int idx3, Register &reg);
    int hex_dec(const string &hex_number);
    string dec_hex(int number);
    bool isValid(const string &hex_number);
};

class CU : public ALU{
public:
    void load(int Reg, int Mem, Register& reg, Memory& mem) {
        int value = hex_dec(mem.getcell(Mem));
        reg.setcell(Reg, value);
    }
    void load(int idxReg, int val, Register& reg) {
        reg.setcell(idxReg, val);
    }
    void store(int idxReg, int idxMem, Register& reg, Memory& mem) {
        int value = reg.getcell(idxReg);
        string val = dec_hex(value);
        mem.setcell(idxMem, val);
    }
    void move(int r1, int r2, Register& reg) {
        int value = reg.getcell(r2);
        reg.setcell(r1, value);

    }
    void jump(int R, int XY, Register& reg, int& PC) {
        if(reg.getcell(R)==reg.getcell(0)) {
            PC = XY;
            PC-=2;

        }
    }
    void halt() {
     //  outputstate();
        cout << "* Thanks For Using This Machine Simulator *" << endl;
        exit(0);
    }
};

void ALU::add_Two_complement(int idx1, int idx2, int idx3, Register &reg) {
    reg.setcell(idx1, reg.getcell(idx2) + reg.getcell(idx3));
}

void ALU::add_Floating_point(int idx1, int idx2, int idx3, Register &reg) {
    float s = *reinterpret_cast<float*>(reg.getcell(idx2));
    float t = *reinterpret_cast<float*>(reg.getcell(idx3));
    float result = s + t;
    reg.setcell(idx1, *reinterpret_cast<int*>(&result));
}

bool ALU::isValid(const string &hex_number) {
    for (char digit : hex_number) {
        if (!isxdigit(digit)) return false;
    }
    return true;
}

int ALU::hex_dec(const string &hex_number) {
    int decimal_value;
    stringstream ss;
    ss << hex << hex_number;
    ss >> decimal_value;
    return decimal_value;
}

string ALU::dec_hex(int number) {
    stringstream ss;
    ss << hex << uppercase << number;
    return ss.str();
}

class CPU {
protected:
  static int PC ;

    string IR="";
    Memory& memory; // Reference to Memory in Machine
    Register& reg;
    ALU alu;
    CU cu;

public:
    CPU(Memory& mem, Register& reg) : memory(mem), reg(reg) {}

    void fetch() {
        IR.clear();
        IR = memory.getcell(PC) + memory.getcell(PC + 1);
        cout<<memory.getcell(PC + 1)<<"\n";
        cout << "IR: " << IR << endl;
    }

    void decode() {
        int opcode = alu.hex_dec(IR.substr(0, 1));
        int R = alu.hex_dec(IR.substr(1, 1));
        int XY=0 ;
        if (opcode==4 || opcode==5 || opcode==6) {
            XY =  alu.hex_dec(IR.substr(2, 1))*10;
            cout << "XY: " << XY << endl;
            XY+= alu.hex_dec(IR.substr(3, 1));
            cout << "XY: " << XY << endl;
        }
        else
          XY = alu.hex_dec(IR.substr(2, 2));

        execute(opcode, R, XY);
    }




    void execute(int opcode, int R, int XY) {
        switch (opcode) {
            case 1: cu.load(R, XY, reg, memory); break;
            case 2: cu.load(R, XY, reg); break;
            case 3: {
                if(XY==0)
                    cout<<reg.getcell(R)<<"\n";
                       cu.store(R, XY, reg, memory); break;

            }
            case 4: {
                int R1=XY%10;
                cout<<R1<<"\n";
                XY/=10;
                int R2=XY%100;
                cout<<R2<<"\n";
                cu.move(R1, R2, reg); break;
            }
            case 5: {
                alu.add_Two_complement(R, (XY%10), ((XY/10)%10) , reg); break;
            }
            case 6: alu.add_Floating_point(R, (XY%10), ((XY/10)%10) , reg); break;
            case 11: cu.jump(R, XY, reg, PC); break;
            case 12: {
              //  outputState();
                cu.halt();
                break;
            }
            default: cout << "Invalid instruction" << endl;
        }
    }

    void runNextStep() {
        fetch();
        decode();
        PC += 2;
    }
friend void outputState();
};
int CPU::PC = 10;
class Machine {
public:
    Memory memory;
    Register reg;
    CPU cpu;
    ALU alu;


    Machine() : cpu(memory, reg) {}


void loadProgramFile(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        throw runtime_error("Unable to open file");
    }

    static int address = 10;
    string instruction;
    while (file >> instruction && address < MEMORY_SIZE) {
        // string check =instruction.substr(2,instruction.size());
        // if(alu.hex_dec(check)>256 || alu.hex_dec(check)<0)
        //     cout<<"Invalid Instruction"<<"\n";
        memory.setcell(address++, instruction.substr(0,2));

        memory.setcell(address++, instruction.substr(2,2));
        cout<<"second"<<memory.getcell(address)<<"\n";
       cpu.runNextStep();

    }
    file.close();

}

void loadProgramIns(const string& instructions)
{

    stringstream ss(instructions);
       // string check =instructions.substr(2,instructions.size());
       //  if(alu.hex_dec(check)>256 || alu.hex_dec(check)<0) {
       //      cout<<"Invalid Instruction"<<"\n";
       //     void MainUI::DisplayMenu();
       //
       //  }
    string instruction;
   static int address = 10;
    while (ss >> instruction && address < MEMORY_SIZE) {
      
        memory.setcell(address, instruction.substr(0,2));
       
        address++;
        memory.setcell(address,instruction.substr(2,2));
        address++;
        cpu.runNextStep();
    }
}

friend void outputState(Machine &machine);

};
void outputState(Machine &machine) {

    cout << "Registers:" << endl << endl ;
    for (int i = 0; i < REGISTER_SIZE; i++) {
        cout << "R" << i << ": " << machine.reg.getcell(i) << " ";
        if ((i + 1) % 16 == 0) {
            cout << endl;
        }
    }
    cout << endl;

    cout << "Memory :" << endl << endl ;
    for (int i = 0; i < MEMORY_SIZE; i++) {
        cout << "M" << i << ": " << machine.memory.getcell(i) << " ";
        if ((i + 1) % 16 == 0) {
            cout << endl;
        }
    }
    cout << endl;
}


class MainUI {
protected:
    Machine machine;
    bool enterFileOrInstructions;
    void loadProgramFile(const string& filename);

public:
    MainUI() : enterFileOrInstructions(false) {}

    void DisplayMenu() {
        while (true) {
            cout << "\nA) Load File\nB) Add Instruction\nC)View Current State\nD) Exit\n";
            char choice;
            cout << "Choose an option: ";
            cin >> choice;
            choice = toupper(choice);
            switch (choice) {
            case 'A':
                inputFileName();
                break;
            case 'B':
                inputInstruction();
                break;
            case 'C':
                outputState( machine);
                break;
            case 'D':
                cout << "Program Ended\n";
                exit(0);
            default:
                cout << "Invalid Choice.\n";
            }
        }
    }

    void getFileOrinstruction()
    {
        if(enterFileOrInstructions)
            inputFileName();
        else
            inputInstruction();
    }

    void inputFileName()
    {
        cout<<"enter File Name: ";
        string FileName;
        cin>>FileName;
        machine.loadProgramFile(FileName);
    }

    void inputInstruction()
    {
        cout<<"Please, enter Instructions spaced: ";
        string Ins_str;
        cin.ignore();
        getline (cin, Ins_str);

        machine.loadProgramIns(Ins_str);

    }

};

int main() {
    cout << "* Vole Machine Simulator *" << endl;
    MainUI ui;
    ui.DisplayMenu();
    return 0;
}
